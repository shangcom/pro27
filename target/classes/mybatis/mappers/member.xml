<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="mapper.member">

	<resultMap type="java.util.HashMap" id="memResult2">
		<result property="id" column="id" />
		<result property="pwd" column="pwd" />
		<result property="name" column="name" />
		<result property="email" column="email" />
		<result property="joinDate" column="joinDate" />
	</resultMap>

	<resultMap type="memberVO" id="memResult">
		<result property="id" column="id" />
		<result property="pwd" column="pwd" />
		<result property="name" column="name" />
		<result property="email" column="email" />
		<result property="joinDate" column="joinDate" />
	</resultMap> 


	<!-- 회원 전체 조회 -->
	<select id="selectAllMemberList" resultMap="memResult">
 
 <![CDATA[
         select * from t_member	order by joinDate desc	 	
      ]]>

	</select>

	<!-- 회원 ID(hong)로 이름 조회 -->
	<select id="selectName" resultType="String">

 		<![CDATA[
         	 	select name from t_member where id='lee'
      	]]>

	</select>

	<!-- 회원 ID(hong)로 이름 조회 -->
	<select id="selectPwd" resultType="String">

 		<![CDATA[
         	 	select pwd from t_member where id='hong'
      	]]>

	</select>

	<select id="selectPwd2" resultType="int">

 		<![CDATA[
         	 	select pwd from t_member where id='lee'
      	]]>

	</select>




	<!-- 회원 ID를 매개변수로 넣어서 그 회원 객체가 있는지 여부를 조회 -->
	<select id="selectMemberById" resultType="memberVO"
		parameterType="String">

 		<![CDATA[
         	 	select * from t_member where id=#{id}
      	]]>



	</select>

	<!--이름과 이메일에 따른 조회 -->
	<select id="searchMember" resultMap="memResult2" parameterType="memberVO">

 		<![CDATA[
         	 	select * from t_member 
      	]]>


		<!-- <where> 
		         <if test=" name != '' and name != null "> name=#{name} </if> 
			     <if test=" email != '' and email != null "> and email=#{email} </if> 
			 </where> -->


		<where>

			<choose>
				<when test="name != '' and name != null and email != '' and email != null ">
				  name like #{name} and email like #{email}
				</when>
				
				
				<when test=" name != '' and name != null ">
				  name like #{name} 
				</when>
				
				
				<when test="email != '' and email != null">
				 email like #{email}
				</when>

			</choose>


		</where>







		order by joinDate desc
	</select>


	<!-- 매개변수로 MemberVO를 집어 넣은 후 회원 추가 결과는 int -->

<!-- 
  <insert id="insertMember" parameterType="java.util.HashMap">

 		<![CDATA[
         	 	insert into t_member(id, pwd, name, email) values(#{id},#{pwd}, #{name}, #{email} )
      	]]>

	</insert>   -->

	 <insert id="insertMember" parameterType="memberVO">

 		<![CDATA[
         	 	insert into t_member(id, pwd, name, email) values(#{id},#{pwd}, #{name}, #{email} )
      	]]>

	</insert>  



	<!-- SQL문에 List 인스턴스나 배열을 전달하면 자동으로 Map에 전달되어 이름을 key로 사용
	List 인스턴스는 list를 키로 사용, 배열은 array를 키로 사용
	  -->

	<select id="foreachSelect"  parameterType="java.util.Map"  resultMap="memResult2">
	
	<![CDATA[
        select * from t_member 
          
      ]]>
	
	where name in
	
	<foreach item="item" collection="list" open="("  separator="," close=")">
		#{item}
	</foreach>
	
	order by joinDate desc
	</select>




<delete id="deleteMember"  parameterType="String">
	<![CDATA[
	   delete from  t_member
	   where
	   id=#{id}
	]]>      
  </delete>



   <update id="updateMember"  parameterType="memberVO">
     <![CDATA[
	     update t_member
	     set pwd=#{pwd}, name=#{name}, email=#{email}
	     where
	     id=#{id}
      ]]>      
   </update> 





</mapper>  